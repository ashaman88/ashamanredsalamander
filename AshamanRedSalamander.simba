{NOTE! THERE WILL NEVER BE BANKING ADDED TO THE PUBLIC VERSION. DO NOT ASK.
DO NOT REQUEST FROM ANYONE TO ADD IT. DO NOT POST BANKING ON THE THREAD.
IF YOU ADD IT FOR PERSONAL USE, UNDER NO CIRCUMSTANCES SHOULD YOU RELEASE.
IF THERE IS A BANKING VERSION RELEASED OR TOO MANY PEOPLE NAG, I WILL TAKE
DOWN THE GREEN SALAMANDER OPTION ALL TOGETHER. DO NOT ASK FOR BANKING!!!}

Program Ashaman2IOSalamander;
  {$Define SMART}
  {$I SRL/SRL.Simba}
  {$I SRL/SRL/Skill/Fighting.Simba}
  {$I SRL/SRL/Misc/Debug.Simba}

{
Ashaman2IOSalamander v6.09
-Make sure you have at least 3 nets and ropes (if you can use that many)  ---- If doing summoning - recommended 12 pouches and 3 4-dose summoning potions (at least)
-Have at least 3 open spaces of inventory
-Make sure all characters are standing in the area around the three trees. See picture
-Make sure zoom is farthest out
-Don't be an A hole, find an empty world
-FILL OUT THE STUFF BELOW
-READ THE OP DIRECTIONS
}


///////////////////////////////////////////////////////////////////////
//                                                                   //
//                  Begin of user setup                              //
//                Fill in the fields below                           //
//                                                                   //
///////////////////////////////////////////////////////////////////////

Const
  SRLStats_Username = '';       // ***Leave blank if you don't have a stats account***
  SRLStats_Password = '';
  TimetoRun         = 4.8;      // ***Enter number of hours to run until script picks up traps and Smart restarts to avoid or time per character (default at 5hrs prob don't touch)***
  HealthMin         = 300;      // ***If health is below this amount script will log out (Only for low levels at green salamanders)***
  CatchType         = 'Red';    // ***Set to Green if catching green salamanders, Red if catching red salamanders***
  PlaySounds        = True;     // ***Plays a sound if another player logs into your spot, set to false if you don't want that***
  Hopper            = False;    // ***Hops if another player logs into your world and stays for more than 60 seconds***

Procedure DeclarePlayers;
Begin
  HowManyPlayers := 1;          // ***Change to however many players you want***
  NumberOfPlayers(HowManyPlayers);
  CurrentPlayer := 0;

  Players[0].Name := '';        // ***Username***
  Players[0].Pass := '';        // ***Password***
  Players[0].Active := True;
  Players[0].BoxRewards := ['Xp', 'lamp', 'oins', 'aphire', 'ssence'];
  LampSkill := 'hunter';
End;

///////////////////////////////////////////////////////////////////////////////////////////
//                                                                                       //
//                            End of user setup                                          //
//           Don't touch below this line unless you know what you're doing!!             //
//                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////

Var
  SalamanderCount,XP,StartTime,RunTime,StartingExperience,RunTimer,Invcnt,NumberofTraps,Level,A,B,C,D,J,K,Increase,CurrentLevel: Integer;
  StartingXP,LevelsGained,XPTL,TrapTime,XT,YT,PTS: Integer;
  RSpotDTM,GSpotDTM,FireDTM,SalDTM,RopeDTM,CheckDTM,NWDTM,SWDTM,GSalDTM,GCheckDTM,Check,Sal,Position,Crash,SetTrap,Color,Tolerance,Width,Height: Integer;
  aFound,Hue,Sat,SalamandersPH,XPH: Extended;
  SoundPath: String;
  Crashed,QuickClick,RestartScript: Boolean;
  DeadTreeBox: TBox;

Const
  ScriptVersion = '6.09';
  UseAutoChecker = True;
  Debug = False;

{*******************************************************************************
Function AutoupdateMe;
By: Shuttleu
Edited By: Ashaman88
Description: Autoupdates Script.
*******************************************************************************}
Procedure AutoUpdateMe;
Var
  Neifile: Integer;
  OnlineVersion, NewScript, NeiFeilNennen: String;
Begin
  If UseAutoChecker then
  Begin
    Writeln('Checking for script updates...');
    OnlineVersion := GetPage('http://ashamanredsalamander.googlecode.com/git/Version.txt');
    Writeln(OnlineVersion);
    Writeln(ScriptVersion)
    If (trim(OnlineVersion) > ScriptVersion) Then
    Begin
      WriteLn('Newer script version online!');
      WriteLn('Autoupdating to newer version.');
      NewScript := GetPage('http://ashamanredsalamander.googlecode.com/git/AshamanRedSalamander.simba');
      NeiFeilNennen := ScriptPath+ 'Ashaman2IOSalamander V'+OnlineVersion+' by Ashaman88.simba';
      Neifile := Rewritefile(NeiFeilNennen, true);
      Try
        WriteFileString(Neifile, NewScript);
      Except
        Begin
          WriteLn('Fatal error writing to '+NeiFeilNennen+'!!');
          Terminatescript;
        End;
      End;
      CloseFile(Neifile);
      WriteLn('New script downloaded to '+NeiFeilNennen+'!! Please use this one!!');
      TerminateScript;
    End Else
      WriteLn('You have the latest version of the script!');
  End Else
    WriteLn('!!!!! Not checking for latest version, you may be outdated!');
End;

Procedure SetDTM;
Begin
  Case LowerCase(CatchType) Of
    'red':
    Begin
      RSpotDTM := DTMFromString('mWAAAAHicY2FgYChkYmDIBuJyIM4D4mCgWCAQBwBxJBD/fsPNUOqhwRAdGQnG/4Fi/EiYEQ2DAADrJwk8');
      SalDTM := DTMFromString('mQwAAAHicY2ZgYHBiYmDwAGJbIOZiZGBgAmIBIA6S4mFwFOVk8JPkZuAHqoNhRiQMBABmpgJp');
      SWDTM := DTMFromString('mQwAAAHicY2ZgYChiYmAoY4LQYUB+JBAHAvH///8ZomNiwJgfyIdhRiQMBAA7wQe3');
      NWDTM := DTMFromString('mQwAAAHicY2ZgYChhYmAoA+IqIA4D8iOBOAmI////zxAdEwPG/EA+DDMiYSAAAEDSB9I=');
      CheckDTM := DTMFromString('mQwAAAHicY2ZgYFgKxMuBeAYQszIyMPwH0oxAut5EiEFOXJDBw1yMgR8oBsOMSBgIAN37BL8=');
    End;
    'green':
    Begin
      GSpotDTM := DTMFromString('mWAAAAHicY2FgYMhnYmAoA+IsKA4AivkAsR8QRwKxi7U2Q1R4KBz/B4rxI2FGNAwCAKfPB/U=');
      GSalDTM := DTMFromString('mQwAAAHicY2ZgYHBiYmCwAWJ3IH4K5L8B4ntALKQlzCCoLsggoCLAwA/kwzAjEgYCAM+HBIo=');
      GCheckDTM := DTMFromString('mWAAAAHicY2FgYPBkZGBwgmJ/IF4CFFsIxLOAeD4Qq4aoMfBysTOwszIzcHGwMnABxZAxIxoGAQAkOgSy');
      Position := DTMFromString('mlwAAAHicY2dgYOgBYnUgdmRkYJgGpHcwQIAkEGcAsTMQiwIxH1T8PBAnArGCogKDk4c5g7OzFYNDZgRDYJgXg7KKMoOahhqDCFAehvnRMCMeDAUAoe4Jkw==');
      FireDTM := DTMFromString('mQwAAAHicY2ZgYFAFYm0gVoLSJkCsAsTxgQYMFhamDDfmyDLwA/kwzIiEgQAAnsgEPw==');
    End;
  End;
  RopeDTM := DTMFromString('mbQAAAHicY2VgYHBkYmBwAGIPILYGYmcgfgQUv80AoZ9BsbsJF4OfvRKDtb4UQ6iLKoOXtQIDP1AcHTNiwWAAAI72CS0=');
End;

Procedure Fr33DTM;
Begin
  Case LowerCase(CatchType) Of
    'red':
    Begin
      FreeDTM(RSpotDTM);
      FreeDTM(SalDTM);
      FreeDTM(SWDTM);
      FreeDTM(NWDTM);
      FreeDTM(CheckDTM);
    End;
    'green':
    Begin
      FreeDTM(GSpotDTM);
      FreeDTM(GSalDTM);
      FreeDTM(GCheckDTM);
      FreeDTM(Position);
      FreeDTM(FireDTM);
    End;
  End;
  FreeDTM(RopeDTM);
End;

{*******************************************************************************
Function HPLevel;
By: ggzz
Edited By: Ashaman88
Description: Gets HP Level.
*******************************************************************************}
Function HPLevel: Integer;
Var
  ColourString: String;
Begin
  Result:= GetMMLevels('HP', ColourString);
End;

{*******************************************************************************
Function Runaways;
By: ggzz
Edited By: Ashaman88
Description: Runs away when low on health.
*******************************************************************************}
Procedure Runaways;
Begin
  If (InFight and (HPLevel < HealthMin)) Then
  Begin
    Writeln('Ghast beat you up, logging out.');
    Logout;
  End;
End;

Function UsingFamiliar: Boolean;              //By Flight.   Modified highly!
Var
  X,Y: Integer;
Begin
  Result := FindColorTolerance(X,Y,11192179,695,130,720,155,20);

  If (Not Result) Then
  Begin
    If FindColorTolerance(X,Y, 3426817,695,130,720,155,20) Then
    Begin
      Result:= False;
      Exit;
    End;

    Result := CountColorTolerance(12501952,135,90,380,329,100)>1000;
  End;
End;

Function SummonPoints: Integer;
Var
  ColourString: String;
Begin
  Result:= GetMMLevels('summon', ColourString);
End;

Function CheckStuff: Boolean;
Begin
  Result:=False;

  If Not LoggedIn Then
    LoginPlayer;

  If FindNormalRandoms Then
  Begin
    If Not LoggedIn Then
      TerminateScript;
    If LowerCase(CatchType) = 'red' Then
      MakeCompass('N') Else
      MakeCompass('S');

    SetAngle(SRL_ANGLE_HIGH);
    Result:=True;
  End;
End;

Function SummoningRenew(PouchToSummon: Integer): Boolean;
Var
  Pouch, X, Y, Tries, Summoning, Empty: Integer;
Begin
  If PouchToSummon = 0 Then
    Exit;

  If Not LoggedIn Then
    Exit;

  If UsingFamiliar Then
  Begin
    Result:= True;
    Exit;
  End;

  Case PouchToSummon Of
    0: Exit;
    1: Pouch := DTMFromString('mQwAAAHicY2aAAE4g5gBidiDmgoqdOnGQoai8guHk4bUMckA+DDMiYSAAANpKBnA=');          //arctic bear
  End;

  Summoning := DTMFromString('mWAAAAHicY2FgYHBigmBXIPYEYn1GBgYrILaE4vz8Ega5a3cZZC/dBKpmYkgBkuxImBENgwAAgewHaA==');              //Potion to drink.
  Empty := DTMFromString('mbQAAAHicY2VgYHBkYmBwBWJ7KHYDYh5GBgYOKBYDYhEgTkxMZbC1c2BIS8tmiE9IYQgKDmPgAupHx4xYMBgAAMSrBxM=');      //emptypot

  If ((SummonPoints < 10) and (Not FindDTM(Summoning, X, Y, MIX1, MIY1, MIX2, MIY2))) Then
  Begin
    If Debug Then
      Writeln('Did not find summoning potion and low on points');
    FreeDTM(Pouch);
    FreeDTM(Summoning);
    FreeDTM(Empty);
    PTS:=0;
    Exit;
  End;

  If (Not UsingFamiliar) Then
  Begin
    If (GetCurrentTab <> Tab_Inv) Then
      GameTab(Tab_Inv);

    If (Not FindDTM(Pouch, X, Y, MIX1, MIY1, MIX2, MIY2)) Then
    Begin
      If Debug Then
        Writeln('No more pouches');
      FreeDTM(Pouch);
      FreeDTM(Summoning);
      FreeDTM(Empty);
      PTS:=0;
      Exit;
    End;

    If (FindDTM(Pouch, X, Y, MIX1, MIY1, MIX2, MIY2) And FindDTM(Summoning, x, y, MIX1, MIY1, MIX2, MIY2)) Then
      If(SummonPoints < 10) Then
      Begin
        If Debug Then
          Writeln('Need to Refill Summoning Points.');

        If(FindDTM(Summoning, X, Y, MIX1, MIY1, MIX2, MIY2)) Then
        Begin
          MMouse(X,Y,4,4);
          If WaitUptextMulti(['ummoning', 'potion'], 500) Then
          Begin
            ClickMouse2(False);
            WaitOptionMulti(['rink', 'Drink', 'rink Summoning', 'Drink Summoning'],RandomRange(400,500));
            Wait(RandomRange(1888,2000));
          End;

          If FindDTM(Empty, X, Y, MIX1, MIY1, MIX2, MIY2) Then
          Begin
            MMouse(X,Y,4,4);
            If WaitUptextMulti(['ial', 'Vial'], 500) Then
            Begin
              ClickMouse2(False);
              WaitOptionMulti(['Drop', 'rop', 'p Vial', 'Drop Vial'],RandomRange(400,500));
              Wait(RandomRange(1880,2000));
            End;
          End;
        End;
      End;

    If (SummonPoints < 10) Then
    Begin
      FreeDTM(Pouch);
      FreeDTM(Summoning);
      FreeDTM(Empty);
      Exit;
    End;

    Tries := 0;

    If(FindDtm(Pouch, X, Y, MIX1, MIY1, MIX2, MIY2) And (SummonPoints >= 10)) Then
    Begin
      MMouse(X, Y, 5, 5);
      ClickMouse2(false);
      WaitOption('Summon',500);
      Wait(RandomRange(1000,1200));
      If FindBlackChatMessage('area') Then
      Begin
        MMouse(209,174,4,4);
        If WaitUpText('alk',900) Then
          ClickMouse2(True) Else
          Begin
            ClickMouse2(False);
            WaitOption('alk',900);
          End;
        ExamineInv;
        SummoningRenew(PTS);
      End;
    End;
  End;
  FreeDTM(Pouch);
  FreeDTM(Summoning);
  FreeDTM(Empty);
End;

 {*******************************************************************************

All of these mouse movements are credited to benland100 and flight

*******************************************************************************}


//By Bandland100, modified to shift mouse speeds after every step
Procedure SuperWindMouse(xs, ys, xe, ye, gravity, wind, minWait, maxWait, maxStep, targetArea: extended);
Var
  veloX,veloY,windX,windY,veloMag,dist,randomDist,lastDist,step: extended;
  lastX,lastY,MSP,W: integer;
  sqrt2,sqrt3,sqrt5: extended;
Begin
  MSP  := MouseSpeed;
  sqrt2:= sqrt(2);
  sqrt3:= sqrt(3);
  sqrt5:= sqrt(5);
  While hypot(xs - xe, ys - ye) > 1 Do
  Begin
    dist:= hypot(xs - xe, ys - ye);
    wind:= minE(wind, dist);
    If dist >= targetArea Then
    Begin
      windX:= windX / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
      windY:= windY / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
    End Else
    Begin
      windX:= windX / sqrt2;
      windY:= windY / sqrt2;
      If (maxStep < 3) Then
      Begin
        maxStep:= random(3) + 3.0;
      End Else
      Begin
        maxStep:= maxStep / sqrt5;
      End;
    End;
    veloX:= veloX + windX;
    veloY:= veloY + windY;
    veloX:= veloX + gravity * (xe - xs) / dist;
    veloY:= veloY + gravity * (ye - ys) / dist;
    if hypot(veloX, veloY) > maxStep then
    Begin
      randomDist:= maxStep / 2.0 + random(round(maxStep) div 2);
      veloMag:= sqrt(veloX * veloX + veloY * veloY);
      veloX:= (veloX / veloMag) * randomDist;
      veloY:= (veloY / veloMag) * randomDist;
    End;
    lastX:= Round(xs);
    lastY:= Round(ys);
    xs:= xs + veloX;
    ys:= ys + veloY;

    Case Random(50) Of
      1..25: W := (MSP + (Random((MSP/4))));
      26..50: W := (MSP - (RandomRange((MSP/2), MSP-1)));
    End;
    If (W < 1) Then
      W := 1;

    If (lastX <> Round(xs)) Or (lastY <> Round(ys)) Then
      MoveMouse(Round(xs), Round(ys));

    step:= hypot(xs - lastX, ys - lastY);
    //W := round((maxWait - minWait) * (step / maxStep) + minWait);
    wait(W);
    lastdist:= dist;
  End;

  If (Round(xe) <> Round(xs)) or (Round(ye) <> Round(ys)) Then
    MoveMouse(Round(xe), Round(ye));

  MouseSpeed := MSP;
End;

Procedure HumanMMouse(eX, eY, ranX, ranY: Integer);
Var
  randSpeed: extended;
  X,Y,X2,Y2,j,Dist,MP: integer;
Begin
  j := MouseSpeed;
  GetMousePos(X, Y);
  Y:=Y-50;
  Dist := Distance(X, Y, eX, eY);
  MP := Round(Dist/150);
  If MP < 0 Then
    MP := 1;

  randSpeed := (random(MouseSpeed) / 2.0 + MouseSpeed) / 10.0;
  X2 := RandomRange(eX-(j*MP), eX+(j*MP));
  Y2 := RandomRange(eY-(j*MP), eY+(j*MP));
  SuperWindMouse(X, Y, X2, Y2, 11, 8, 10.0 / randSpeed, 12.0 / randSpeed, 10.0 * randSpeed, 10.0 * randSpeed);
  GetMousePos(X, Y);
  Y:=Y-50;
  MMouse(eX, eY, ranX, ranY);
  MouseSpeed := j;
End;

Procedure Release;
Var
  X,Y,I,T1: Integer;
Begin
  If (Not(LoggedIn)) Then
    Exit;

  MouseSpeed := RandomRange(18, 23);
  CheckStuff;
  QuickClick:=False;

  For I:=0 To 1 Do
  Begin
    If FindDTM(Sal,X,Y,MIX1,MIY1,MIX2,MIY2) Then
    Begin
      If Debug Then
        Writeln('Releasing Salamanders');

      HumanMMouse(X,Y,5,5);
      ClickMouse2(False);

      If I=0 Then
      Begin
        If (XT<269) And (YT<156) Then
          Wait(RandomRange(1280,1350)) Else
          Wait(RandomRange(790,850));
        ChooseOption('ease')
      End Else
        If WaitOption('ease',800) Then
        Begin
          QuickClick:=False;
          Exit;
        End;

      InvCnt:=CountItems('DTM',Sal,[]);
      MarkTime(T1);
      If I=0 Then
      Begin
        Repeat
          If TimeFromMark(T1)>2000 Then
            Break;
          If Not QuickClick Then
            If FindDTMRotated(Check,X,Y,a,b,c,d,-Pi,Pi,Pi/30,aFound) Then
            Begin
              If Debug Then
                Writeln('Found check net dtm in release');
              HumanMMouse(X,Y,3,3);
              If WaitUpTextMulti(['Chec','heck'],RandomRange(300,320)) Then
              Begin
                ClickMouse2(False);
                QuickClick:=True;
              End;
          End;
        Until (CountItems('DTM',Sal,[]) < InvCnt);
      End;
    End Else
    Begin
      InvCnt := InvCount;
      MarkTime(T1);
      If I=0 Then
      Begin
        Repeat
          If Not QuickClick Then
            If FindDTMRotated(Check,X,Y,a,b,c,d,-Pi,Pi,Pi/30,aFound) Then
            Begin
              If Debug Then
                Writeln('Found check net dtm in release');
              HumanMMouse(X,Y,3,3);
              If WaitUpTextMulti(['Chec','heck'],RandomRange(300,320)) Then
              Begin
                ClickMouse2(False);
                QuickClick:=True;
              End;
            End;
          If TimeFromMark(T1)>3500 Then
            Break;
        Until (InvCount < InvCnt);
        If Not QuickClick Then
          Wait(RandomRange(1100,1200)) Else
          Begin
            Wait(RandomRange(450,550))
            Exit;
          End;
      End;
    End;
  End;
End;

Procedure AvoidDeadTree;
Var
  CTS: Integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
Begin
  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(0.04,0.46);
  FindColorsSpiralTolerance(MSCX,MSCY,TPA,4345948,A,B,C,D,8);
  ColorToleranceSpeed(CTS);
  SetColorSpeed2Modifiers(0.2, 0.2);

  ATPA := SplitTPAEx(TPA,30,30);
  SortATPASize(ATPA,True);
  DeadTreeBox:=GetATPABounds(ATPA);
End;


Procedure FindEmptyTree;
Var
  X,Y,H,I,CTS,XX,YY,SearchFromX,SearchFromY: Integer;
  E,F,G,H1: Integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
Begin
  If (Not(LoggedIn)) Then
    Exit;

  CheckStuff;

  If ((CountItems('DTM',RopeDTM,[])=(NumberofTraps-Level)) Or (CountItems('DTM',RopeDTM,[])=0)) And (SetTrap=0)  Then
  Begin
    If Debug Then
      Writeln('No more traps to setup');
    Exit;
  End;

  If (CountItems('DTM',RopeDTM,[])=0) Then
  Begin
    NumberofTraps := NumberofTraps-1;
    Writeln('Lost a trap');
    Exit;
  End;

  If (SetTrap<>1) And (Debug=True) Then
    Writeln('Finding Empty Trap Spot') Else
    If Debug Then
      Writeln('Looking for Laid Traps');

  MouseSpeed := RandomRange(18, 23);

  E:=A;
  F:=B;
  G:=C;
  H1:=D;

  If LowerCase(CatchType)='green' Then
    If FindDTM(FireDTM,X,Y,MSX1,MSY1,MSX2,MSY2) Then
    Begin
      If Debug Then
        Writeln('Found fire, staying away');
      E:=139;
      F:=75;
      G:=C;
      H1:=D;
    End;

  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);

  GetMousePos(XX, YY);
  SearchFromX := MSCX;
  SearchFromY := MSCY;

  If (XX > (MSCX + 30)) Then
    SearchFromX:= (MSCX + 35)
  Else If (XX < (MSCX - 30)) Then
    SearchFromX:= (MSCX - 35);

  If (YY > (MSCY + 30)) Then
    SearchFromY:= (MSCY + 35)
  Else If (YY < (MSCY - 30)) Then
    SearchFromY:= (MSCY - 35);

  SetColorSpeed2Modifiers(Hue,Sat);
  FindColorsSpiralTolerance(SearchFromX,SearchFromY,TPA,Color,E,F,G,H1,Tolerance);
  ColorToleranceSpeed(CTS);
  SetColorSpeed2Modifiers(0.2, 0.2);

  ATPA := SplitTPAEx(TPA,Width,Height);

  If (Length(ATPA) = 0) Then
    Exit;

  H:=High(ATPA);

  For I:=0 To H Do
  Begin
    MiddleTPAEx(ATPA[I],X,Y);

    If Debug Then
      Writeln('Empty Tree Length: '+tostr(Length(atpa[i])));

    If LowerCase(CatchType)='red' Then
    Begin
      AvoidDeadTree;
      If PointInBox(Point(X,Y),DeadTreeBox) Then
          Continue;
    End;

    If (Length(ATPA[I]) < 22) Then
      Continue;

    HumanMMouse(X+Increase,Y,0,2);

    If SetTrap=1 Then
    Begin
      If (WaitUpTextMulti(['Dism','sman','mant','antle'],RandomRange(200,300))) Then
      Begin
        If Debug Then
          Writeln('Found dismantle option, clicking');
        ClickMouse2(False);

        If WaitOptionMulti(['Dism','sman','mant','antle'],RandomRange(400,500)) Then
        Begin
          If Debug Then
            Writeln('Found option to dismantle');
          Release;
          Exit;
        End;
      End;
    End Else
    Begin
      If (WaitUpTextMulti(['Set'],RandomRange(200,300))) Then
      Begin
        GetMousePos(XT,YT);

        If Debug Then
          Writeln('X: '+tostr(XT)+' Y: '+tostr(YT));

        If Debug Then
          Writeln('Found uptext set, clicking');

        ClickMouse2(False);

        If WaitOption('Set',RandomRange(400,500)) Then
        Begin
          If Debug Then
            Writeln('Found option set');
          Release;
          Exit;
        End;
      End;
    End;
  End;
End;

{*******************************************************************************
Function ProgressReport;
By: Sin
Edited By: Ashaman88
Description: Will Make a progress report.
*******************************************************************************}
Procedure ProgressReport;
Begin
  If Not Debug Then
    ClearDebug;

  XP := (GetXPBarTotal - StartingExperience);
  XPH := Round(XP * (3600.0 / (GetTimeRunning / 1000.0)));
  SalamandersPH := Round((SalamanderCount * (3600.0 / (GetTimeRunning / 1000.0))));

  If (StartingXP - XP) < 0 Then
  Begin
    StartingXP:= (XpTillNextLevel(Skill_Hunter)+XP);
    Writeln('Gained a level!!');
    LevelsGained := LevelsGained + 1;
  End;

  If ((CurrentLevel+LevelsGained)>=40) Then
    Level:=3;

  If XPH < 1000 Then
    XPH:=1000.0;

  XPTL:= Round(((StartingXP-XP) / (XPH/1000.0))*3600.0);

  Writeln('========AshamanSalamander v'+ScriptVersion+'=========');
  Writeln('Time Running: ' + TimeRunning);
  Writeln('Catching: ' + CatchType+' Salamanders');
  Writeln('Salamanders Caught: ' + ToStr(SalamanderCount)+'    TTL: '+MsToTime(XPTL, Time_Formal));
  Writeln('Experience Earned: ' + IntToStr(XP)+ '   Levels Gained: ' +IntToStr(LevelsGained));
  Writeln('Experience/Hour: ' + ToStr(XPH));
  Writeln('Salamanders/H: ' + ToStr(SalamandersPH));
  Writeln('=======================================');

  Stats_IncVariable('Hunter EXP (Gained)', 272);
  Stats_IncVariable('Items Picked Up', 1);
  Stats_Commit;
End;

Procedure CheckNet;
Var
  X,Y,T: Integer;
Label
  Jumper;
Begin
  If (Not(LoggedIn)) Then
    Exit;

  CheckStuff;
  If QuickClick Then
    GoTo Jumper;

  If Not FindDTMRotated(Check,X,Y,A,B,C,D,-Pi,Pi,Pi/30,aFound) Then
    Exit;

  If Debug Then
    Writeln('Checking for Caught Salamanders');

  MouseSpeed := RandomRange(18, 23);

  If FindDTMRotated(Check,X,Y,a,b,c,d,-Pi,Pi,Pi/30,aFound) Then
  Begin
    If Debug Then
      Writeln('Found check net dtm');
    HumanMMouse(X,Y,3,3);

    If WaitUpTextMulti(['Chec','heck'],RandomRange(500,650)) Then
    Begin
      ClickMouse2(False);

      Jumper:
      If WaitOptionMulti(['Check'],800) Then
      Begin
        If Debug Then
          Writeln('Chose check net option');
        InvCnt := InvCount;
        MarkTime(T);
        Repeat
          If TimeFromMark(T) > 8000 Then
            Exit;
        Until (InvCount = InvCnt + 3);
        SalamanderCount := SalamanderCount + 1;
        ProgressReport;
      End;
      QuickClick:=False;
    End;
  End;

  If FindBlackChatMessage('advanced') Then
  Begin
    WriteLn('Gained a Level!');
    HoverSkill('Hunter',False);
    Wait(RandomRange(1500,2100));
    ExamineInv;
  End;
End;

Function RedDots: Boolean;
Var
  CTS: Integer;
  TPA: TPointArray;
Begin
  Result:=False;

  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(1);
  FindColorsSpiralTolerance(MMCX,MMCY,TPA,1314513,592,75,644,102,43);
  ColorToleranceSpeed(CTS);
  SetColorSpeed2Modifiers(0.2, 0.2);

  If Length(TPA)> 0 Then
  Begin
    If Debug Then
      Writeln(tostr(TPA));
    Result:=True;
  End;
End;

Procedure FailedTrap;
Var
  X,Y,E,F,G,H,T: Integer;
  TrapFail: Boolean;
Begin
  If (Not(LoggedIn)) Then
    Exit;

  CheckStuff;

  If Debug Then
    Writeln('Looking for Failed Traps');

  MarkTime(TrapTime);

  If LowerCase(CatchType) = 'red' Then
  Begin
    If FindDTM(SWDTM,X,Y,MMX1,MMY1,MMX2,MMY2) Or FindDTM(NWDTM,X,Y,MMX1,MMY1,MMX2,MMY2) Then
    Begin
      If Debug Then
        Writeln('Using large search area for failed traps');
      E := 102;
      F := 100;
      G := 417;
      H := 340;
    End Else
    Begin
      If Debug Then
        Writeln('Using small search area for failed traps');
      E := 132;
      F := 80;
      G := 333;
      H := 265;
    End;
  End Else
  Begin
    If FindDTM(FireDTM,X,Y,MSX1,MSY1,MSX2,MSY2) Then
    Begin
      If Debug Then
        Writeln('Found fire staying away');
      E := 139;
      F := 75;
      G := C;
      H := D;
    End Else
    Begin
      E := A;
      F := B;
      G := C;
      H := D;
    End;
  End;

  MouseSpeed := RandomRange(18, 23);

  If FindObjEx(X,Y,['Take','heck','Set','antle','Inter'],[1853259],9,50,E,F,G,H) Then
  Begin
    If Debug Then
      Writeln('Found potential rope(1) on ground, clicking');

    HumanMMouse(X,Y,2,2);
    ClickMouse2(False);

    Invcnt := InvCount;
    If WaitOption('Take',RandomRange(300,400)) Then
    Begin
      If Debug Then
        Writeln('Found option to take, waiting to stop moving');

      MarkTime(T);
      Repeat
        Wait(RandomRange(10,20));
      Until (((Invcount = Invcnt +1) And (Not(IsMoving))) Or (TimeFromMark(T) > 6000));

      If Not TrapFail Then
      Begin
        If Debug Then
          Writeln('Trying to pick up second part of trap');

        HumanMMouse(261,177,3,3);
        ClickMouse2(False);

        Invcnt := InvCount;
        If WaitOption('Take',RandomRange(300,400)) Then
        Begin
          If Debug Then
            Writeln('Found option to pick up second part of trap');

          MarkTime(T);
          Repeat
            Wait(RandomRange(10,20));
          Until ((InvCount = Invcnt + 1) Or (TimeFromMark(T) > 6000));
        End
        Else
        Begin
          If Debug Then
            Writeln('Didnt find second part of trap, trying again');
          TrapFail:=True;
          FailedTrap;
        End;
      End;
    End;
  End;

  If FindObjEx(X,Y,['Take','heck','Set','antle','Inter'],[669259,993843,1519924,1523275,1258044,1258045,1191227,993075],2,50,E,F,G,H) Then
  Begin
    If Debug Then
      Writeln('Found potential failed trap(2)');
    HumanMMouse(X,Y,2,2);
    ClickMouse2(False);

    Invcnt := InvCount;
    If WaitOption('Take',RandomRange(300,400)) Then
    Begin
      If Debug Then
        Writeln('Found option to pickup');

      MouseSpeed := RandomRange(18, 23);

      MarkTime(T);
      Repeat
        Wait(RandomRange(10,20));
      Until (((Invcount = Invcnt +1) And (Not(IsMoving))) Or (TimeFromMark(T) > 6000));


      If Not TrapFail Then
      Begin
        If Debug Then
          Writeln('Trying to pickup second part of trap');

        HumanMMouse(261,177,3,3);
        ClickMouse2(False);

        Invcnt := InvCount;
        If WaitOption('Take',RandomRange(300,400)) Then
        Begin
          If Debug Then
            Writeln('Found second part of trap');

          MarkTime(T);
          Repeat
            Wait(RandomRange(10,20));
          Until ((InvCount = Invcnt + 1) Or (TimeFromMark(T) > 6000));
        End Else
        Begin
          If Debug Then
            Writeln('Failed to pickup second part of trap, trying again');
          TrapFail:=True;
          FailedTrap;
        End;
      End;
    End;
  End;

  TrapFail:=False;

  If OptionsExist(['Exam','mine','Examine','Canc','ncel','Cancel'],False) Then
    MMouse(37,32,10,10);
End;

Procedure Walktospot;
Var
  X,Y: Integer;
Begin
  If (Not(LoggedIn)) Then
    Exit;

  CheckStuff;

  If Debug Then
    Writeln('Walking to main spot');

  If Lowercase(CatchType) = 'red' Then
  Begin
    If FindDTM(RSpotDTM,X,Y,MMX1,MMY1,MMX2,MMY2) Then
    Begin
      If Debug Then
        Writeln('Found start spot red');

      Mouse(X,Y,2,2,True);
      Wait(RandomRange(600,700));
      If IsMoving Then
      Begin
        Repeat
          Wait(100);
        Until(Not IsMoving);
        Writeln('You are now in the correct spot, good luck!');
      End;
    End Else
      Writeln('You are not in the correct spot!!');
  End Else
  Begin
    If FindDTM(GSpotDTM,X,Y,575,45,680,127) Then
    Begin
      If Debug Then
        Writeln('Found green main spot');

      Mouse(X,Y,2,2,True);
      Wait(RandomRange(600,700));
      If IsMoving Then
      Begin
        Repeat
          Wait(100);
        Until(Not IsMoving);
        If Debug Then
          Writeln('Repositioned.');
      End;
    End Else
    Begin
      If Debug Then
        Writeln('DID NOT FIND GREEN SPOT, TRY TO MANUALLY CORRECT');

      Mouse(187,304,3,3,False);
      WaitOptionMulti(['Walk','Wal','alk','here'],RandomRange(500,700));
    End;
  End;
End;

Procedure WorldHop;
Var
  X,Y: Integer;
Begin
  Repeat
    If Length(GetMiniMapDotsIn('w',610,74,642,102))>0 Then
    Begin
      If Debug Then
        WriteLn('Someone is in this spot, hopping.');

      ExitToLobby;
      Wait(RandomRange(5000,6000));
      MMouse(100,100,100,100);
      ChangeWorld(RandomWorld(True,False));
      Wait(RandomRange(30000,45000));

      CheckStuff;
    End;
  Until ((Length(GetMiniMapDotsIn('w',615,75,642,102))=0) And (Not FindDTMRotated(Check,X,Y,a,b,c,d,-Pi,Pi,Pi/30,aFound)));

  If Debug Then
    WriteLn('Found an open world, starting.');

  NumberofTraps := CountItems('DTM',RopeDTM,[]);
End;

Procedure CorrectPOS;
Var
  X,Y:Integer;
Begin
  If FindDTMRotated(Position,X,Y,MSX1,MSY1,MSX2,MSY2,-Pi,Pi,Pi/30,aFound) Then
    Walktospot;
End;

Procedure Setup;
Begin
  ClearDebug;
  AutoUpdateMe;


  {$IFDEF SIMBAMAJOR980}
    SMART_SERVER := 10;
    SMART_MEMBERS := TRUE;
    SMART_SIGNED := TRUE;
    SMART_SUPERDETAIL := FALSE;
  {$ELSE}
    SRL_SIXHOURFIX := TRUE;
    SMART_FIXSPEED := TRUE;
  {$ENDIF}

  SetupSRL;

  If (SRLStats_Username = '') Then
    SetupSRLStats(754, 'Anonymous', 'anon1337')
  Else
    SetupSRLStats(754, SRLStats_Username, SRLStats_Password);

  DeclarePlayers;
  LoginPlayer;

  If Not LoggedIn Then
    Repeat
      Wait(100);
    Until LoggedIn;

  AddOnTerminate('FR33DTM');
  SetDTM;
  RestartScript:=False;
  ClearDebug;

  If PlaySounds Then
    If (Not FileExists(ScriptPath+'noyelling.wav')) Then
      writeln('No audio file found to alert when another person logs in. Please download audio file from OP.');

  SoundPath:=ScriptPath+'noyelling.wav';

  StartTime:=GetSystemTime;
  MarkTime(TrapTime);

  RunTime:= Round(TimetoRun * 60 * 60 * 1000 + Random(30000));
  Writeln('You are going to run for ' + MsToTime(RunTime, Time_Formal));

  SetTrap:=0;
  PTS:= 1;                  // ***Pouch To Summon.. 1 for arctic bear, 0 for nothing***
  SetRun(True);

  NumberofTraps := CountItems('DTM',RopeDTM,[]);
  Writeln('You have '+IntToStr(NumberofTraps)+' traps in your inventory.');

  If NumberofTraps < 2 Then
  Begin
    Writeln('You have less than 2 traps, logging off');
    Logout;
    TerminateScript;
  End;

  If GetSkillLevel(Skill_Hunter) < 40 Then
    Level:= 2 Else
    Level:= 3;
  Writeln('You can use '+IntToStr(Level)+' trap spots with my script at your level.');

  CurrentLevel:= GetSkillLevel(Skill_Hunter);
  StartingXP:= XpTillNextLevel(Skill_Hunter);
  LevelsGained:= 0;
  GameTab(Tab_Inv);
  ToggleXPBar(True);
  StartingExperience := GetXPBarTotal;

  SmartSetRefresh(80);

  If LowerCase(CatchType) = 'red' Then
  Begin
    Writeln('You are catching Red Salamanders');
    A         := 102;
    B         := 100;
    C         := 417;
    D         := 340;
    J         := 2450;
    K         := 2550;
    Check     := CheckDTM;
    Sal       := SalDTM;
    Color     := 2106666;
    Tolerance := 4;
    Hue       := 0.26;
    Sat       := 0.26;
    Width     := 10;
    Height    := 14;
    Increase  := 3;
  End Else
  Begin
    Writeln('You are catching Green Salamanders');
    A         := 1;
    B         := 23;
    C         := 498;
    D         := 312;
    J         := 2750;
    K         := 2950;
    Check     := GCheckDTM;
    Sal       := GSalDTM;
    Color     := 2237218;
    Tolerance := 3;
    Hue       := 0.00;
    Sat       := 1.33;
    Width     := 10;
    Height    := 14;
    Increase  := 2;
  End;
End;

Procedure MainLoop;
Begin
  If Lowercase(CatchType) = 'green' Then
  Begin
    Runaways;
    CorrectPOS;
  End;

  FindEmptyTree;
  CheckNet;
  If (RedDots) Or (TimeFromMark(TrapTime)>(80000+Random(30000))) Then
    FailedTrap;
  SummoningRenew(PTS);
End;

Procedure Cleanup;
Var
  T: Integer;
Begin
  SetTrap:=1;
  If Debug Then
    Writeln('Collecting supplies to hop');
  MarkTime(T);
  Repeat
    Mainloop;
  Until ((CountItems('DTM',RopeDTM,[])=(NumberofTraps)) Or (TimeFromMark(T)> RandomRange(80000,90000)));
  SetTrap:=0;
End;

Function Crasher: Boolean;
Begin
  Result := False

  If Crashed Then
  Begin
    If (Length(GetMiniMapDotsIn('w',610,74,642,102))>0) Then
    Begin
      If TimeFromMark(Crash)>RandomRange(60000,65000) Then
      Begin
        If PlaySounds Then
          PlaySound(SoundPath);

        MarkTime(Crash);
        Crashed := False;
        Writeln('Another Player has been here too long, hopping');
        Result:=True;
        Cleanup;
      End;
    End Else
    Begin
      If Debug Then
        Writeln('The other player left, we are good');
      Crashed:=False;
      Crash:=0;
    End;
  End Else
  Begin
    If (Length(GetMiniMapDotsIn('w',610,74,642,102))>0) Then
    Begin
      If PlaySounds Then
        PlaySound(SoundPath);

      If Hopper Then
      Begin
        Writeln('Found another player, if they dont leave in 60 seconds we gonna hop');
        MarkTime(Crash);
        Crashed:=True;
      End;
    End;
  End;

  If FindBlackChatMessage('isn') Then
  Begin
    Writeln('You have been crashed. Attempting to Hop');
    Result:=True;
    Cleanup;
  End;
End;

Label
  Restart;
Begin
  Restart:
  Setup;
  Repeat
    If LowerCase(CatchType) = 'red' Then
      MakeCompass('N') Else
      MakeCompass('S');

    SetAngle(SRL_ANGLE_HIGH);
    WalkToSpot;
    WorldHop;
    SummoningRenew(PTS);

    MarkTime(RunTimer);
    Repeat
      Mainloop;
      If Crasher Then
      Begin
        WalkToSpot;
        WorldHop;
      End;
    Until (RunTime < TimeFromMark(RunTimer)) or (Not(LoggedIn));

    If LoggedIn Then
    Begin
      Cleanup;
      Logout;
      Writeln('Time Ran: ' + TimeRunning);

      If HowManyPlayers <= 1 Then
      Begin
        {$IFDEF SMARTManager}
          SMARTManager;
        {$ELSE}
          {$IFDEF SIMBAMAJOR990}
            SixHourFix;
            RestartScript:=True;
            Break;
          {$ENDIF}
        {$ENDIF}
        TerminateScript;
      End;
    End;

    NextPlayer(Players[CurrentPlayer].Active);
    MarkTime(RunTimer);
  Until (AllPlayersInactive);

  If RestartScript Then
    GoTo Restart;
End.
