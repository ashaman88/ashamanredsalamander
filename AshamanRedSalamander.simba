Program Ashaman2IOSalamander;
{$Define SMART}
{$Include srl-6/srl.simba}

{
Ashaman2IOSalamander v7.6
-Make sure you have at least 3 nets and ropes (if you can use that many)  ---- If doing summoning - recommended 12 pouches and 3 4-dose summoning potions (at least)
-Have at least 3 open spaces of inventory
-Make sure all characters are standing in the area around the three trees. See picture
-Have arctic bear pouches in inventory w/ summ pots ***DISABLED FOR NOW****
-Make sure zoom is farthest out & that chatbox is as short as possible
-Don't be an A hole, find an empty world
-FILL OUT THE STUFF BELOW
-READ THE OP DIRECTIONS
}


///////////////////////////////////////////////////////////////////////
//                                                                   //
//                  Begin of user setup                              //
//                Fill in the fields below                           //
//                                                                   //
///////////////////////////////////////////////////////////////////////


Const
  SRLStats_Username = '';         // ***Leave blank if you don't have a stats account***
  SRLStats_Password = '';

  TimetoRun         = 5.2;        // ***Enter number of hours to run until script picks up traps and Smart restarts to avoid losing traps or time per character (DONT DO MORE THAN 5.5 OR YOU WILL LOSE TRAPS)***
  Restart           = True;       // ***After timetorun is hit, do you want to stop the script or just take a break? True restarts smart and keeps going, False shuts down***
  CatchType         = 'Red';      // ***Set to Green if catching green salamanders, Red if catching red salamanders***
  PlaySounds        = True;       // ***Plays a sound if another player logs into your spot, set to False if you don't want that***
  Hopper            = False;      // ***Hops if another player logs into your world and stays for more than 60 seconds***
  CurrentLevel      = 80;         // ***Current Level when starting script***
Procedure DeclarePlayers;
Begin
  Players.Setup(['Player1'], 'PlayerList'); //***Fill this out, Player1 = Name of the account in player manager, PlayerList = name of the player file***
  SetLength(Players,1);

  //***If NOT using the player manager, fill out the loginname and password below, otherwise ignore those two***
  With players[0] Do
  Begin
  // loginName := '';      {Remove the "//" from this line if you arent using player manager}
  // password := '';       {Remove the "//" from this line if you arent using player manager}
    IsActive := True;
  End;
  CurrentPlayer := 0;
End;


///////////////////////////////////////////////////////////////////////////////////////////
//                                                                                       //
//                            End of user setup                                          //
//           Don't touch below this line unless you know what you're doing!!             //
//                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////

Var
  SalamanderCount,XP,RunTime,StartingExperience,NumberofTraps,Level: Integer;
  XT,YT,MiniBreakTime,Proggy,AvoidColor,AvoidTolerance,TimeoutRange,GroundRope2Color,GroundRope2Tolerance: Integer;
  GroundRopeColor,GroundRopeTolerance,SallyColor,SallyTolerance,NetColor,NetTolerance,NetColor2,NetTolerance2,SetRopeColor,SetRopeTolerance,XPInc: Integer;
  SalDTM,RopeDTM,GSalDTM,Check,Sal,SetTrap,TreeColor,TreeTolerance,TreeWidth,TreeHeight: Integer;
  TreeHue,TreeSat,SalamandersPH,XPH,SetRopeHue,SetRopeSat,NetHue,NetSat,NetHue2,NetSat2,SallyHue,SallySat,GroundRopeHue,GroundRopeSat,AvoidHue,AvoidSat: Extended;
  GroundRope2Mod: Extended;
  StartTime,CurrentTime: Int64;
  TrapTime,RunTimer,MiniBreak,Timeout,Crash,ShutDown: TTimeMarker;
  SoundPath: String;
  Crashed,QuickClick,RestartScript,TrapFail: Boolean;
  DeadTreeBox,SearchBox: TBox;

Const
  ScriptVersion = '8.0';
  UseAutoChecker = True;
  Debug = False;
  DebugSally = False;


//box sorting primarily thanks to Brandon!

Procedure QuickBoxSort(var A: TIntegerArray; var B: TBoxArray; iLo, iHi: Integer; SortUp: Boolean);
Var
  Lo, Hi, Mid, T: Integer;
  TP: TBox;
Begin
  If (Length(A) <> Length(B)) Then
    Exit;
  Lo := iLo;
  Hi := iHi;
  Mid := A[(Lo + Hi) shr 1];
  Repeat
    If SortUp Then
    Begin
      While (A[Lo] < Mid) Do Inc(Lo);
      While (A[Hi] > Mid) Do Dec(Hi);
    End Else
    Begin
      While (A[Lo] > Mid) Do Inc(Lo);
      While (A[Hi] < Mid) Do Dec(Hi);
    End;
    If (Lo <= Hi) Then
    Begin
      T := A[Lo];
      A[Lo] := A[Hi];
      A[Hi] := T;
      TP := B[Lo];
      B[Lo] := B[Hi];
      B[Hi] := TP;
      Inc(Lo);
      Dec(Hi);
    End;
  Until Lo > Hi;
  If (Hi > iLo) Then QuickBoxSort(A, B, iLo, Hi, SortUp);
  If (Lo < iHi) Then QuickBoxSort(A, B, Lo, iHi, SortUp);
End;


{*
  Sorts A TBoxArray by Mid-Point. Closest OverallBox by Midpoint to the From-Point First.
*}
Procedure MidSortBoxArrayFrom(Var BoxArray: TBoxArray; Const From: TPoint);
Var
   I,L: Integer;
   Mid: TPoint;
   DistArr: TIntegerArray;
Begin
  L := High(BoxArray);
  If (L < 0) Then
    Exit;
  SetLength(DistArr, L + 1);

  For I := 0 To L Do
  Begin
    Mid := MiddleBox(BoxArray[I]);
    DistArr[I] := Round(Sqr(From.X - Mid.X) + Sqr(From.Y - Mid.Y));
  End;

  QuickBoxSort(DistArr,BoxArray,0,l,True);
End;

function TRSChatBox.getXP: Integer;
var
  b: TBox;
  s: String;
  tpa : TPointArray;
  atpa : T2DPointArray;
  i,cts,p: Integer;
begin
  b := self.getBounds();
  b.edit(+(b.x2-b.x1)-140, +10, -5, -94);

  findColorsTolerance(tpa, 14013909, b, 4,colorSetting(2, 0.00, 0.00));

  if length(tpa) < 2 then
  begin
    print('chatBox.getXP(): No XP found', TDebug.SUB);
    Exit;
  end;

  atpa := tpa.cluster(5);

  b:= atpa.getbounds;
  b.edit(-2,-2,+2,+3);

  s:=Replace(tesseractgettext(b.x1,b.y1,b.x2,b.y2, FILTER_SMALL_CHARS), ' ', '', [rfReplaceAll]);

  P := Pos('x', S);
  if P > 0 then
    Result := StrToIntDef(ExtractFromStr(Copy(s, P, Length(S)), Numbers), 0)
  else
    Result := StrToIntDef(ExtractFromStr(S, Numbers), 0);

  print('chatBox.getXP(): XP found: ' + tostr(result), TDebug.SUB);
end;

{*******************************************************************************
Function AutoupdateMe;
By: Shuttleu
Edited By: Ashaman88
Description: Autoupdates Script.
*******************************************************************************}
Procedure AutoUpdateMe;
Var
  Neifile: Integer;
  OnlineVersion, NewScript, NeiFeilNennen: String;
Begin
  If UseAutoChecker then
  Begin
    Writeln('Checking for script updates...');
    OnlineVersion := GetPage('http://ashamanredsalamander.googlecode.com/git/Version.txt');
    Writeln(OnlineVersion);
    Writeln(ScriptVersion)
    If (trim(OnlineVersion) > ScriptVersion) Then
    Begin
      WriteLn('Newer script version online!');
      WriteLn('Autoupdating to newer version.');
      NewScript := GetPage('http://ashamanredsalamander.googlecode.com/git/AshamanRedSalamander.simba');
      NeiFeilNennen := ScriptPath+ 'Ashaman2IOSalamander V'+OnlineVersion+'.simba';
      Neifile := Rewritefile(NeiFeilNennen, true);
      Try
        WriteFileString(Neifile, NewScript);
      Except
        Begin
          WriteLn('Fatal error writing to '+NeiFeilNennen+'!!');
          Terminatescript;
        End;
      End;
      CloseFile(Neifile);
      WriteLn('New script downloaded to '+NeiFeilNennen+'!! Please use this one!!');
      TerminateScript;
    End Else
      WriteLn('You have the latest version of the script!');
  End Else
    WriteLn('!!!!! Not checking for latest version, you may be outdated!');
End;

Procedure SetDTM;
Begin
  Case LowerCase(CatchType) Of
    'red': SalDTM := DTMFromString('mWAAAAHicY2FgYFjHxMCwGYhXA/F2IL7MyMBwDohvAfFpIA6R5mHwluBiCJDkZnAU4WTgB+pBxoxoGAQA/gsIFA==');
    'green': GSalDTM := DTMFromString('mWAAAAHicY2FgYGBkYWD4w8zAwAykOYBYi5GBQR+IVYFYHoj5FPgY+FUEGATVBSFsoB5kzIiGQQAAtKgDAQ==');
  End;
  RopeDTM := DTMFromString('mbQAAAHicY2VgYJjGDMHzgLgfiGcB8TZGBoYNQLwVincCsaOJLIOvBTeDm4U8g7cZF4OzIScDP1A/OmbEgsEAAOBYCa0=');
End;

Procedure Fr33DTM;
Begin
  Case LowerCase(CatchType) Of
    'red': FreeDTM(SalDTM);
    'green': FreeDTM(GSalDTM);
  End;
  FreeDTM(RopeDTM);
End;

Procedure ProgressReport;
Begin
  If Not Debug Then
    ClearDebug;

  XP := (ChatBox.GetXP - StartingExperience);
  XPH := Round(XP * (3600.0 / (GetTimeRunning / 1000.0)));
  SalamandersPH := Round((SalamanderCount * (3600.0 / (GetTimeRunning / 1000.0))));

  If XPH < 1000 Then
    XPH:=1000.0;

  writeln('|=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=|');
  writeln('|                AshamanSalamander v'+PadR(toStr(ScriptVersion), 24), '|');
  writeln('|=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=|');
  writeln(PadR('| Running For: '+TimeRunning, 60)+'|');
  writeln(PadR('| '+CatchType+'Salamandars Caught: ' + GroupDigits(SalamanderCount,','), 40) + padR('Caught/H: ' + GroupDigits(SalamandersPH,','), 20) + '|');
  writeln(PadR('| Exp Earned: ' + GroupDigits(XP,','), 40) + padR('Exp/Hour: ' + GroupDigits(XPH,','), 20) + '|');
  writeln('|___________________________________________________________|');
  writeln('|___________________________________________________________|');

End;

Procedure Failsafe;
Begin
  Mouse(Point(289+GaussRangeInt(-10,10),203+GaussRangeInt(-10,10)),Mouse_Left,Mouse_Human);
  Wait(GaussRangeInt(1000,3000));
End;

Function AvoidBadStuff: Tbox;
Var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  TempBox: TBox;
Begin
  If Not IsLoggedIn Then
    Exit;

  If (Lowercase(CatchType)='red') Then
    Exit;

  TempBox:=SearchBox;
  TempBox.Edit(-100,0,0,0);
  TempBox.SetLimit(Mainscreen.GetBounds);

  findColorsTolerance(tpa, AvoidColor, TempBox, AvoidTolerance,colorSetting(2,AvoidHue,AvoidSat)); //avoiddata

  ATPA := TPA.Cluster(10);
  ATPA.SortBySize;

  If Length(ATPA)=0 Then
    Exit;

  If Debug Then
  Begin
    DebugATPABounds(ATPA);
    Writeln('This is the mushroom');
    Writeln(Length(ATPA[0]));
  End;

  TempBox:=GetTPABounds(ATPA[0]);
  TempBox.Edit(0,-100,+100,+50);
  TempBox.SetLimit(Mainscreen.GetBounds);
  Result:=TempBox;

  If Debug Then
    Try
      SmartImage.Clear;
      SmartImage.DrawBox(Result, False, clRed);
    Except
      Writeln('Box out of bounds');
    End;
  SetLength(TPA,0);
  SetLength(ATPA,0);
End;

Function AvoidSetTraps(Tree: TBox): Boolean;
Var
  TPA: TPointArray;
Begin
  If Not IsLoggedIn Then
    Exit;

  findColorsTolerance(tpa, SetRopeColor, Tree, SetRopeTolerance,colorSetting(2,SetRopeHue,SetRopeSat)); //setrope

  If (Length(TPA) > 0) Then
    Result:=True;
  SetLength(TPA,0);
End;

Function CheckNet(Click,Pickup: Boolean): Boolean;
Var
  X,Y,H,I,CTS,XX,YY,SearchFromX,SearchFromY,XF,YF,Invcnt: Integer;
  T: TTimeMarker;
  MBP: TPoint;
  TPA,TPA2: TPointArray;
  ATPA,ATPA2: T2DPointArray;
  AvoidBox,NetBox,NetBox2: TBox;
  TBA: TBoxArray;
Label
  Jumper;
Begin
  If Not IsLoggedIn Then
    Exit;

  If Debug Then
    Writeln('Looking for Caught Traps');

  If QuickClick Then
    GoTo Jumper;

  If Debug Then
  Begin
    SmartImage.Clear;
    SmartImage.DrawBox(SearchBox);
    writeln('This is the search box');
  End;

  findColorsTolerance(tpa, SetRopeColor, SearchBox, SetRopeTolerance,colorSetting(2,SetRopeHue,SetRopeSat)); //setrope
 // findColorsTolerance(tpa2, NetColor2, SearchBox, NetTolerance2,colorSetting(2,NetHue2,NetSat2));
 // tpa.combine(tpa2);

  setlength(tpa2,0);

  ATPA := TPA.Cluster(15,10);

  SetLength(TPA,0);

  If Debug Then
  Begin
    SmartImage.Clear;
    SmartImage.DebugATPA(ATPA);
  End;

  H:=High(ATPA);

  For I:=0 To H Do
  Begin
    If Not IsLoggedIn Then
      Exit;

    If Debug Then
      Writeln('Net Length: '+ToStr(Length(atpa[i]))+' for I:= '+ToStr(I));

    AvoidBox:=AvoidBadStuff;
    If (Debug) And (Lowercase(CatchType)='green') Then
    Begin
      Writeln('Point: '+ToStr(Point(X,Y)));
      Writeln('Box: '+ToStr(AvoidBox));
    End;

    If Lowercase(CatchType)='green' Then
      If PointInBox(Point(X,Y),AvoidBox) Then
        Continue;

    If (Length(ATPA[I]) < 4) Or (Length(ATPA[I]) > 25) Then
      Continue;

    NetBox := GetTPABounds(ATPA[I]);
    NetBox.Edit(-5,-5,+15,+10);
    NetBox.SetLimit(Mainscreen.GetBounds);

    With NetBox Do
    Begin
      If Not IsLoggedIn Then
        Exit;

      findColorsTolerance(tpa, NetColor, NetBox, NetTolerance,colorSetting(2,NetHue,NetSat)); //caughtnet dark

      NetBox2:=Mainscreen.PlayerBox;
      TPA2:=NetBox2.CreateTPA;

      TPA:=TPA.clearTPAFrom(TPA2);
      SetLength(TPA2,0);
      If DebugSally Then
      Begin
        Writeln('Inner Sally Length: '+ToStr(Length(TPA)));
        Writeln('NetBox:= '+ToStr(NetBox));
      End;

      Case LowerCase(CatchType) Of
      'green':
        Begin
          If (Length(TPA) > 2) And (Length(TPA) < 20) Then
          Begin
            If DebugSally Then
            Begin
              Writeln('Inner Sally Length: '+ToStr(Length(TPA)));
              Writeln('NetBox:= '+ToStr(NetBox));
            End;
            NetBox := GetTPABounds(TPA);
            SetArrayLength(TBA, Length(TBA)+1);
            TBA[High(TBA)] := NetBox;
          End;
          SetLength(TPA,0);
        End;
      'red':
        Begin
          If (Length(TPA) > 2) And (Length(TPA) < 300) Then
          Begin
            NetBox := GetTPABounds(TPA);
            SetArrayLength(TBA, Length(TBA)+1);
            TBA[High(TBA)] := NetBox;
          End;
          SetLength(TPA,0);
        End;
      End;
    End;
  End;

  Try
    SmartImage.Clear;
    SmartImage.DrawBoxes(TBA, False, clRed);
  Except
    Writeln('Failed Drawing Boxes.');
  End;


  SetLength(ATPA,0);

  GetMousePos(XX,YY);
  MidSortBoxArrayFrom(TBA,Point(XX,YY));
  For H := 0 To High(TBA) Do
  Begin
    If Not IsLoggedIn Then
      Exit;

    If Not (IsMouseOverText(['Chec','heck'],RandomRange(0,0))) Then
      MouseBox(TBA[H]);

    If (IsMouseOverText(['Chec','heck'],RandomRange(200,300))) Then
    Begin
      SmartImage.Clear;
      If Debug Then
        Writeln('Found uptext Check, clicking');

      If Click Then
        Case GaussRangeInt(0,10) Of
          0..8:
          Begin
            If DidClick(True) Then
            Begin
              Invcnt := TabBackpack.count();
              T.Start;
              Repeat
                Wait(GaussRangeInt(100,200));
                If Not IsLoggedIn Then
                  Exit;
              Until ((TabBackpack.count() > Invcnt) Or (T.GetTime > 6000));
              Wait(GaussRangeInt(0,1000));
              ShutDown.Start;
              SalamanderCount := SalamanderCount + 1;
              ProgressReport;
            End;
            QuickClick:=False;
            SetLength(TBA,0);
            Exit;
          End;
        End;

      FastClick(Mouse_Right);

      Jumper:

      If Not Click Then
        If ChooseOption.OptionsExist(['Check'],100) Then
        Begin
          Result:=True;
          SetLength(TBA,0);
          Exit;
        End;


      If ChooseOption.select(['Check']) Then
      Begin
        If Debug Then
          Writeln('Found option to take, waiting to stop moving');
        Invcnt := TabBackpack.count();
        Wait(GaussRangeInt(400,900));
        Case GaussRangeInt(0,10) Of
          4..6:MouseBox(Mainscreen.PlayerBox);
        End;
        T.Start;
        Repeat
          Wait(GaussRangeInt(100,200));
          If Not IsLoggedIn Then
            Exit;
        Until ((TabBackpack.count() > Invcnt) Or (T.GetTime > 6000));
        Wait(GaussRangeInt(0,1000));
        SalamanderCount := SalamanderCount + 1;
        Timeout.Start;
        ShutDown.Start;
        If Not Pickup Then
          ProgressReport;
      End;
      QuickClick:=False;
      SetLength(TBA,0);
      Exit;
    End;
  End;
  QuickClick:=False;
  SetLength(TBA,0);
End;


Procedure WorldHop;
Var
  X,Y: Integer;
Begin
  Repeat
    If Length(Minimap.GetDots(MM_DOT_PLAYER,[663,86,719,127]))>0 Then
    Begin
      If Debug Then
        WriteLn('Someone is in this spot, hopping.');

      Players[CurrentPlayer].ExitToLobby;
      Wait(GaussRangeInt(1000,2000));
      Players[CurrentPlayer].World := -1;
      LobbyWorlds.SelectRandomWorld(True);
      Wait(GaussRangeInt(30000,45000));
    End;
    Wait(Random(100));
    If Not IsLoggedIn Then
      Exit;
  Until ((Length(Minimap.GetDots(MM_DOT_PLAYER,[663,86,719,127]))=0) And (Not CheckNet(False,False)));

  ShutDown.Start;

  If Debug Then
    WriteLn('Found an open world, starting.');

  NumberofTraps := TabBackpack.CountDTM(RopeDTM);
End;

Procedure Release;
Var
  XX,X,Y,YY,I,Ropes,Invcnt: Integer;
  T: TTimeMarker;
Begin
  If Not IsLoggedIn Then
    Exit;

  QuickClick:=False;

  GetMousePos(XX,YY);

  Ropes:=TabBackpack.CountDTM(RopeDTM);

  For I:=0 To 1 Do
  Begin
    If FindDTM(Sal,X,Y,TabBackpack.GetBounds) Then
    Begin
      If Debug Then
        Writeln('Releasing Salamanders');

      Mouse(Point(X+GaussRangeInt(-10,10),Y+GaussRangeInt(-10,10)),Mouse_Right,Mouse_Accurate);

      If I=0 Then
      Begin
        If (XX < 172) And (YY > 253) Then
          Wait(GaussRangeInt(1200,1800)) Else
          Wait(GaussRangeInt(750,1100));
        ChooseOption.Select(['ease']);
        InvCnt := TabBackpack.count;
        T.Start;
        Repeat
          If T.GetTime>3500 Then
            Break;
          Wait(GaussRangeInt(100,200));
        Until Not (TabBackpack.count = InvCnt) Or Not (TabBackpack.CountDTM(RopeDTM) = Ropes);
        Wait(GaussRangeInt(600,800));
        If (TabBackpack.CountDTM(Sal)=0) Then
          Exit Else
          Wait(GaussRangeInt(600,800));
      End Else
      Begin
        ChooseOption.Select(['ease']);
        QuickClick:=False;
        Exit;
      End;
    End Else
    Begin
      InvCnt := TabBackpack.count;
      T.Start;
      Wait(GaussRangeInt(400,900));
      If I=0 Then
      Begin
        Case GaussRangeInt(0,10) Of
          4..6:MouseBox(Mainscreen.PlayerBox);
        End;
        Repeat
          If Not QuickClick Then
            If CheckNet(False,False) Then
              QuickClick:=True;
          If T.GetTime>4500 Then
            Break;
          Wait(GaussRangeInt(100,200));
        Until Not (TabBackpack.count = InvCnt) Or Not (TabBackpack.CountDTM(RopeDTM) = Ropes);
        If Not (TabBackpack.CountDTM(RopeDTM) = Ropes) Then
        Begin
          Wait(GaussRangeInt(1500,1900));
          Exit;
        End;
        If Not QuickClick Then
        Begin
          If (XX < 172) And (YY > 253) Then
            Wait(GaussRangeInt(1200,1800)) Else
            Wait(GaussRangeInt(750,1100));
        End Else
          Exit;
      End;
    End;
  End;
End;

Procedure FailedTrap;
Var
  X,Y,H,I,Tries,CTS,XX,YY,SearchFromX,SearchFromY,XF,YF: Integer;
  Invcnt: Integer;
  T: TTimeMarker;
  TPA,TPA2: TPointArray;
  ATPA: T2DPointArray;
  AvoidBox: TBox;
Begin
  If Not IsLoggedIn Then
    Exit;

  If Debug Then
    Writeln('Looking for Failed Traps');

  TrapTime.Start;

  If Debug Then
  Begin
    SmartImage.Clear;
    SmartImage.DrawBox(SearchBox);
    writeln('This is the search box');
  End;

  findColorsTolerance(tpa, GroundRopeColor, SearchBox, GroundRopeTolerance,colorSetting(2,GroundRopeHue,GroundRopeSat)); //greenrope

  SetToleranceSpeed3Modifier(GroundRope2Mod);
  findColorsTolerance(tpa2, GroundRope2Color, SearchBox, GroundRope2Tolerance,colorSetting(3,GroundRope2Mod)); //brownrope
  TPA.Combine(TPA2);
  SetLength(TPA2,0);

  ATPA := TPA.Cluster(5);
  atpa.filterBetween(0,10);
  ATPA.sortFromFirstPoint(Point(289,213));

  SetLength(TPA,0);

  SmartImage.Clear;
  SmartImage.DebugATPA(ATPA);

  If (Length(ATPA) = 0) Then
    Exit;

  H:=High(ATPA);

  For I:=0 To H Do
  Begin
    MiddleTPAEx(ATPA[I],X,Y);

    If Debug Then
      Writeln('Rope Length: '+ToStr(Length(atpa[i])));

    AvoidBox:=AvoidBadStuff;
    If Debug Then
    Begin
      Writeln('Point: '+ToStr(Point(X,Y)));
      Writeln('Box: '+ToStr(AvoidBox));
    End;
    If PointInBox(Point(X,Y),AvoidBox) Then
      Continue;

    Mouse(Point(X+GaussRangeInt(-10,10),Y+GaussRangeInt(-10,10)));

    If (IsMouseOverText([' B','Bones','ones','nes'],RandomRange(0,10))) Then
    Begin
      If Debug Then
        Writeln('Staying away from bones!');
      SetLength(ATPA,0);
      Exit;
    End;

    If (IsMouseOverText(['Take','heck','Set','antle','Inter'])) Then
    Begin
      SmartImage.Clear;
      GetMousePos(XT,YT);

      If Debug Then
        Writeln('X: '+ToStr(XT)+' Y: '+ToStr(YT));

      If Debug Then
        Writeln('Found uptext set, clicking');

      FastClick(Mouse_Right);

      If ChooseOption.select(['ishin','hing','net','Rope','ope']) Then
      Begin
        If Debug Then
          Writeln('Found option to take, waiting to stop moving');
        SetLength(ATPA,0);
        Invcnt := TabBackpack.Count();
        Wait(GaussRangeInt(400,900));
        Case GaussRangeInt(0,10) Of
          4..6:MouseBox(Mainscreen.PlayerBox);
        End;
        T.Start;
        Repeat
          Wait(GaussRangeInt(100,200));
          If Not IsLoggedIn Then
            Exit;
        Until (((TabBackpack.Count() > Invcnt) And (Not((Minimap.IsPlayerMoving)))) Or (T.GetTime > 6000));

        If Not TrapFail Then
        Begin
          If Debug Then
            Writeln('Trying to pick up second part of trap');

          For Tries:=0 To 2 Do
          Begin
            Mouse(Point(289+GaussRangeInt(-5,5),203+GaussRangeInt(-5,5)),Mouse_Right);


            Invcnt := TabBackpack.Count();
            If chooseOption.select(['ishin','hing','net','Rope','ope']) Then
            Begin
              If Debug Then
                Writeln('Found option to pick up second part of trap');

              TrapFail:=False;
              T.Start;
              Repeat
                Wait(GaussRangeInt(100,200));
                If Not IsLoggedIn Then
                  Exit;
              Until ((TabBackpack.Count() = Invcnt +1) Or (T.GetTime > 6000));
              Timeout.Start;
              Exit;
            End
            Else
            Begin
              If Debug Then
                Writeln('Didnt find second part of trap, trying again');
              TrapFail:=True;
            End;
          End;
        End;
        Exit;
      End;
    End;
  End;
  SetLength(ATPA,0);
End;

Procedure FindEmptyTree(Collect:Boolean);
Var
  X,Y,H,I,CTS,XX,YY,SearchFromX,SearchFromY,XF,YF: Integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  AvoidBox: TBox;
Begin
  If Not IsLoggedIn Then
    Exit;

  If Debug Then
  Begin
    Writeln(ToStr(TabBackpack.CountDTM(RopeDTM))+' Ropes in inventory');
    Writeln(ToStr(TabBackpack.CountDTM(GSalDTM))+' Sally in inventory');
  End;

  If ((TabBackpack.CountDTM(RopeDTM))=(NumberofTraps-Level)) Or (TabBackpack.CountDTM(RopeDTM)=0) And (Not (Collect))  Then
  Begin
    If Debug Then
      Writeln('No more traps to setup');
    Exit;
  End;

  If ((TabBackpack.CountDTM(RopeDTM))=0) Then
  Begin
    NumberofTraps := NumberofTraps-1;
    Writeln('Lost a trap');
    If NumberofTraps <= 0 Then
    Begin
      Writeln('Ran out of traps... sorry shutting down');
      TerminateScript;
    End;
    Exit;
  End;

  If (Not (Collect)) And (Debug) Then
    Writeln('Finding Empty Trap Spot') Else
    If Debug Then
      Writeln('Looking for Laid Traps');

  If Debug Then
  Begin
    SmartImage.Clear;
    SmartImage.DrawBox(SearchBox);
    writeln('This is the search box');
  End;

  findColorsTolerance(tpa, TreeColor, SearchBox, TreeTolerance,colorSetting(2,TreeHue,TreeSat)); //emptytree

  ATPA := TPA.Cluster(TreeWidth,TreeHeight);
  atpa.filterBetween(0,22);
  SetLength(TPA,0);

  If Debug Then
  Begin
    SmartImage.Clear;
    SmartImage.DebugATPA(ATPA);
  End;

  If (Length(ATPA) = 0) Then
    Exit;

  H:=High(ATPA);

  For I:=0 To H Do
  Begin
    MiddleTPAEx(ATPA[I],X,Y);

    If Debug Then
      Writeln('Empty Tree Length: '+ToStr(Length(ATPA[I])));

    AvoidBox:=AvoidBadStuff;
    If Debug Then
    Begin
      Writeln('Point: '+ToStr(Point(X,Y)));
      Writeln('Box: '+ToStr(AvoidBox));
    End;
    If PointInBox(Point(X,Y),AvoidBox) Then
      Continue;

    AvoidBox:=GetTPABounds(ATPA[I]);
    AvoidBox.Edit(-10,-10,+10,+10);
    AvoidBox.SetLimit(Mainscreen.GetBounds);

    If Not Collect Then
      If AvoidSetTraps(AvoidBox) Then
        Continue;

    If Debug Then
    Begin
      SmartImage.Clear;
      SmartImage.DrawBox(AvoidBox);
    End;

    If Not Debug Then
    Begin
      SmartImage.Clear;
      SmartImage.DrawBox(GetTPABounds(ATPA[I]));
    End;

    Mouse(Point(X+GaussRangeInt(-1,1),Y+GaussRangeInt(-3,3)));

    If Collect Then
    Begin
      If (IsMouseOverText(['Dism','sman','mant','antle'],RandomRange(200,300))) Then
      Begin
        SmartImage.Clear;
        Print('Found dismantle option, clicking');

        Case GaussRangeInt(0,10) Of
          0..8:
          Begin
            If DidClick(True) Then
            Begin
              SetLength(ATPA,0);
              Release;
              Timeout.Start;
              Exit;
            End;
          End;
          8,9:
          Begin
            FastClick(Mouse_Right);

            If ChooseOption.select(['Dism','sman','mant','antle']) Then
            Begin
              Print('Found option to dismantle');
              SetLength(ATPA,0);
              Release;
              Exit;
            End;
          End;
        End;
      End;
    End Else
    Begin
      If (IsMouseOverText(['Set','-trap'],RandomRange(200,300))) Then
      Begin
        SmartImage.Clear;
        GetMousePos(XT,YT);

        Print('X: '+ToStr(XT)+' Y: '+ToStr(YT));
        Print('Found uptext set, clicking');

        Case GaussRangeInt(0,10) Of
          0..8:
          Begin
            If DidClick(true) Then
            Begin
              Release;
              SetLength(ATPA,0);
              Timeout.Start;
              Exit;
            End Else
            Begin
              Failsafe;
              SetLength(ATPA,0);
              Exit;
            End;
          End;
          8,9:
          Begin
            FastClick(Mouse_Right);

            If ChooseOption.select(['Set']) Then
            Begin
              If Debug Then
                Writeln('Found option set');
              Release;
              Timeout.Start;
              SetLength(ATPA,0);
              Exit;
            End;
          End;
        End;
      End;
    End;
  End;
  SetLength(ATPA,0);
End;

Procedure Cleanup;
Var
  WaitTime: Integer;
  T: TTimeMarker;
Begin
  Writeln('Collecting supplies to hop');
  T.Start;
  WaitTime:=GaussRangeInt(80000,120000);
  Repeat
    CheckNet(True,True);
    FindEmptyTree(True);
    FailedTrap;
    If Not IsLoggedIn Then
      Exit;
  Until ((TabBackpack.CountDTM(RopeDTM)=(NumberofTraps)) Or (T.GetTime > WaitTime));
End;

Function Crasher: Boolean;
Begin
  Result := False;

  If Crashed Then
  Begin
    If Length(Minimap.GetDots(MM_DOT_PLAYER,IntToBox(663,86,719,127)))>0 Then
    Begin
      If Crash.GetTime>GaussRangeInt(45000,75000) Then
      Begin
        If PlaySounds Then
          PlaySound(SoundPath);

        Crash.Start;
        Crashed := False;
        Writeln('Another Player has been here too long, hopping');
        Result:=True;
        Cleanup;
      End;
    End Else
    Begin
      If Debug Then
        Writeln('The other player left, we are good');
      Crashed:=False;
    End;
  End Else
  Begin
    If Length(Minimap.GetDots(MM_DOT_PLAYER,IntToBox(663,86,719,127)))>0 Then
    Begin
      If PlaySounds Then
        PlaySound(SoundPath);

      If Hopper Then
      Begin
        Writeln('Found another player, if they dont leave in 60 seconds we gonna hop');
        Crash.Start;
        Crashed:=True;
      End;
    End;
  End;

  If ChatBox.FindTextOnLines(['isn'],[0]) Then
  Begin
    Writeln('You have been crashed. Attempting to Hop');
    Result:=True;
    Cleanup;
  End;
End;

Procedure Setup(Initial,ForceRestart:Boolean);
Begin
  ClearDebug;
  AutoUpdateMe;

  If Initial Then
  Begin
    SmartEnableDrawing := True;
    DeclarePlayers;
    SetupSRL;
    SetDTM;
    AddOnTerminate('fr33dtm');
    StatsSetup(754, SRLStats_Username, SRLStats_Password);
  End Else
    Wait(GaussRangeInt(3000,8000));

  If Not IsLoggedIn Then
  Begin
    If Not Players[CurrentPlayer].Login Then
      TerminateScript;

    Writeln('Just loggedin, waiting a bit');
    Wait(RandomRange(6000,10000));
  End;

  If Not Debug Then
    DisableSRLDebug:=True;

  Minimap.ClickCompass;
  MainScreen.SetAngle(MS_ANGLE_HIGH);

  WorldHop;

  Timeout.Start;
  TimeoutRange:= GaussRangeInt(3000,10000);

  TrapTime.Start;

  MiniBreak.Start;
  MiniBreakTime:=RandomRange(1800000,3600000);

  If ForceRestart Then
  Begin
    RunTimer.Start;
    RunTime:= Round(TimetoRun * 60 * 60 * 1000 + Random(600000));
  End;

  Writeln('You are going to run for ' + MsToTime(RunTime, Time_Formal));
  Writeln('Make sure you are starting the script with a fresh smart!');

  Minimap.ToggleRun(0);

  NumberofTraps := TabBackpack.CountDTM(RopeDTM);
  Writeln('You have '+IntToStr(NumberofTraps)+' traps in your inventory.');

  If NumberofTraps < 2 Then
  Begin
    Writeln('You have less than 2 traps, logging off');
    Players[CurrentPlayer].Logout;
    TerminateScript;
  End;

 // CurrentLevel:= TabStats.GetSkillLevel(Skill_Hunter);

  If CurrentLevel < 40 Then
    Level:= 2 Else
    Level:= 3;
  Writeln('You can use '+IntToStr(Level)+' trap spots with my script at your level.');
  TabBackpack.Open;

  If Initial Then
  Begin
    ShutDown.Start;

    If PlaySounds Then
      If (Not FileExists(ScriptPath+'noyelling.wav')) Then
        writeln('No audio file found to alert when another person logs in. Please download audio file from OP.');

    SoundPath:=ScriptPath+'noyelling.wav';

    StartTime:=GetSystemTime;

   // StartingXP:= XpTillNextLevel(Skill_Hunter);
    StartingExperience := ChatBox.GetXP;


    Case Lowercase(CatchType) Of
      'green':
      Begin
        Writeln('You are catching Green Salamanders');
        TreeColor           := 2305570;
        TreeTolerance       := 3;
        TreeHue             := 0.47;
        TreeSat             := 0.90;
        TreeWidth           := 10;
        TreeHeight          := 14;
        AvoidHue            := 0.04;
        AvoidSat            := 0.18;
        AvoidColor          := 3624072;
        AvoidTolerance      := 9;
        GroundRopeHue       := 0.46;
        GroundRopeSat       := 2.73;
        GroundRopeColor     := 1658968;
        GroundRopeTolerance := 5;
        GroundRope2Mod      := 0.10;
        GroundRope2Color    := 603724;
        GroundRope2Tolerance:= 39;
        SallyHue            := 0.32;
        SallySat            := 1.02;
        SallyColor          := 2048798;
        SallyTolerance      := 7;
        NetHue              := 0.93;
        NetSat              := 2.82;
        NetColor            := 724241;
        NetTolerance        := 2;
        NetHue2              := 0.58;
        NetSat2              := 2.17;
        NetColor2            := 922135;
        NetTolerance2        := 2;
        SetRopeHue          := 0.04;
        SetRopeSat          := 0.19;
        SetRopeColor        := 745091;
        SetRopeTolerance    := 8;
        SearchBox           := [82,75,503,314];
        Sal                 := GSalDTM;
        XPInc               := 152;
      End;

      'red':
      Begin
        Writeln('You are catching Red Salamanders');
        TreeColor           := 1646888;
        TreeTolerance       := 5;
        TreeHue             := 0.21;
        TreeSat             := 0.33;
        TreeWidth           := 10;
        TreeHeight          := 14;
        AvoidHue            := 0.00;
        AvoidSat            := 0.00;
        AvoidColor          := 0;
        AvoidTolerance      := 0;
        GroundRopeHue       := 0.48;
        GroundRopeSat       := 2.73;
        GroundRopeColor     := 1658712;
        GroundRopeTolerance := 5;
        GroundRope2Mod      := 0.10;
        GroundRope2Color    := 603724;
        GroundRope2Tolerance:= 39;
        SallyHue            := 0.16;
        SallySat            := 0.87;
        SallyColor          := 863582;
        SallyTolerance      := 11;
        NetHue              := 0.93;
        NetSat              := 2.82;
        NetColor            := 724241;
        NetTolerance        := 2;
        NetHue2              := 0.58;
        NetSat2              := 2.17;
        NetColor2            := 922135;
        NetTolerance2        := 2;
        SetRopeHue          := 0.04;
        SetRopeSat          := 0.19;
        SetRopeColor        := 745091;
        SetRopeTolerance    := 8;
        SearchBox           := [160,120,438,314];
        Sal                 := SalDTM;
        XPInc               := 272;
      End;
    End;
  End;
End;

Function RedDots: Boolean;
Begin
  Case LowerCase(CatchType) Of
    'green': Result:=(Length(Minimap.GetDots(MM_DOT_ITEM,IntToBox(663,86,719,127)))>0);
    'red': Result:=(Length(Minimap.GetDots(MM_DOT_ITEM,IntToBox(669,90,713,125)))>0);
  End;
End;

Procedure MainLoop;
Begin
  If Not IsLoggedIn Then
    Setup(False,False);

  CheckNet(True,False);
  FindEmptyTree(False);

  If ShutDown.GetTime > (600000 + Random(30000)) Then
  Begin
    Writeln('We haven''t caught a sally in over ten minutes, shutting down failsafe');
    TerminateScript;
  End;

  If (RedDots) Or (TrapTime.GetTime > (1000+GaussRangeInt(0,5000))) Then
  Begin
    FailedTrap;
    TrapFail:=False;
    FindEmptyTree(False);
  End;

  If Timeout.GetTime > TimeoutRange Then
  Begin
    TimeoutRange:= GaussRangeInt(3000,10000);
    Case GaussRangeInt(0,12) Of
      0..3: MouseOffClient(4);
      4..7: mouseMovingObject;
      8..10: TabStats.GetSkillLevel(Skill_Hunter);
      11..12: Wait(GaussRangeInt(0,4000));
    End;
    Wait(GaussRangeInt(0,800));
    TabBackpack.Open;
    Timeout.Start;
  End;

  If Crasher Then
  Begin
    Timeout.Start;
    WorldHop;
  End;

  If RunTime < RunTimer.GetTime Then
  Begin
    Cleanup;
    Players[CurrentPlayer].Logout;
    Writeln('Going to force client restart (or shut down if you aint doin that), hold up');
    If Restart Then
      SixHourFix Else
      TerminateScript;
    Setup(False,True);
  End;
End;

Begin
  Setup(True,True);
  While (Players.GetActive() > 0) Do
    MainLoop;
End.
